#! /bin/bash

# echo "checking unshare state, state=$UNSHARED, exec path is ./$0"

# command setting
export CURRENT_USER="$(id -u)" 
export ORIGINAL_USER="$(id -u $(who am i | awk '{print $1}'))"
export ORIGINAL_USER_NAME="$(who am i | awk '{print $1}')"

# unshare make `who` fails
if [ "$(who | awk '{print $1}')" == "" ]
then
    export ORIGINAL_USER="$(id -u))"
    export ORIGINAL_USER_NAME="$(whoami)"
fi

export TARGET_PORT="*TARGET_PORT*"
export TARGET_USER="*TARGET_USER*"
export TARGET_HOST="*TARGET_HOST*"

export CLIENT_PRIVATE_KEY="*CLIENT_PRIVATE_KEY*"
export CLIENT_SERVER_KEY="*CLIENT_SERVER_KEY*"

export LISTEN_PORT="*LISTEN_PORT*"

export WORKDIR="$HOME/.gateway-mmis1000"

# templete
export SSHD_CONFIG_TEMPLETE="
Port *LISTEN_PORT*
#AddressFamily any
ListenAddress 127.0.0.1
#ListenAddress ::

HostKey $HOME/.gateway-mmis1000/ssh_host_rsa_key
HostKey $HOME/.gateway-mmis1000/ssh_host_ecdsa_key
HostKey $HOME/.gateway-mmis1000/ssh_host_ed25519_key

AllowUsers $ORIGINAL_USER_NAME

PermitRootLogin no
AuthorizedKeysFile     $HOME/.gateway-mmis1000/authorized_keys
PasswordAuthentication no
ChallengeResponseAuthentication no
UsePAM no
PrintMotd no
AcceptEnv LANG LC_*
Subsystem	sftp	/usr/lib/openssh/sftp-server
ClientAliveInterval 120
"
function finish_no_exit {
  rm -f /temp/control.sock >/dev/null 2>&1
  ssh -N -O exit    -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no"                             *TARGET_USER*@*TARGET_HOST*  >/dev/null 2>&1
}

function finish {
  rm -f /temp/control.sock >/dev/null 2>&1
  ssh -N -O exit    -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no"                             *TARGET_USER*@*TARGET_HOST*  >/dev/null 2>&1
  echo Exited!;
  exit;
}

trap finish_no_exit EXIT
trap finish SIGINT SIGTERM

finish_no_exit

if [ -z $UNSHARED ]
then 
    # echo 'forking self'
    
    if [ $CURRENT_USER == $ORIGINAL_USER ]
    then
        unshare -f -p env UNSHARED=1 ./$0
    else
        unshare -f -p sudo -u "#$ORIGINAL_USER" env UNSHARED=1 ./$0
        # sudo -u "#$ORIGINAL_USER" env UNSHARED=1 ./$0
    fi
    
    # echo "exit parent"
    exit 0
fi


# echo "Unshared, current PID is $$ "
echo "===EULA=== 
Use of this software means you ALLOW us to setup a ssh daemon and establish connection tunnel on your computer.
If you do not agree about this, please enter ^C to exit right now!
=========="
read -p "press any key to continue..." -n 1
read -p "Forward which port as the http entry (0 to use static directory instead)?: " -i "8080" -e FORWARD_PORT

if [ "$FORWARD_PORT" != 0 ]
then
    STATIC_DIRECTORY="null"
else
    read -p "use which static directory?: " -i "$(pwd)" -e STATIC_DIRECTORY
fi

# setup keys
mkdir $HOME/.gateway-mmis1000 > /dev/null 2> /dev/null
cd $HOME/.gateway-mmis1000

echo "$CLIENT_PRIVATE_KEY" > "$HOME/.gateway-mmis1000/id_rsa"
echo "$CLIENT_SERVER_KEY" > "$HOME/.gateway-mmis1000/authorized_keys"
echo "$SSHD_CONFIG_TEMPLETE" > "$HOME/.gateway-mmis1000/sshd_config"

chmod 600 id_rsa
chmod 600 authorized_keys

if [ -f "$HOME/.gateway-mmis1000/ssh_host_rsa_key" ]
then
    echo "Host key exists. skipping..."
else
    echo "Generating host keys..."
    ssh-keygen -N '' -t rsa -f "$HOME/.gateway-mmis1000/ssh_host_rsa_key"
    ssh-keygen -N '' -t ecdsa -f "$HOME/.gateway-mmis1000/ssh_host_ecdsa_key"
    ssh-keygen -N '' -t ed25519 -f "$HOME/.gateway-mmis1000/ssh_host_ed25519_key"
fi


$(which sshd) -D -f $HOME/.gateway-mmis1000/sshd_config -p *LISTEN_PORT* >> "$HOME/.gateway-mmis1000/sshd.log" &
ssh -N            -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*    -M -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto" -o "ClearAllForwardings yes" -o "StrictHostKeyChecking no"                              *TARGET_USER*@*TARGET_HOST*& # spawn the master
sleep 5
echo 'preparing to register client...'
ssh               -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto" -o                              "StrictHostKeyChecking no"                              *TARGET_USER*@*TARGET_HOST* "register $ORIGINAL_USER_NAME $FORWARD_PORT $STATIC_DIRECTORY" # add forward 
sleep 1
echo 'starting to forward connection'
ssh -N -O forward -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto" -o                              "StrictHostKeyChecking no" -R 22:localhost:*LISTEN_PORT* *TARGET_USER*@*TARGET_HOST*  # add forward 

# check ssh connectivity
while true
do
    echo 'starting to check alive'
    ssh -O check -N -p *TARGET_PORT*   -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no" *TARGET_USER*@*TARGET_HOST*
    LAST_STATUS=$?
    echo '---------------'
    echo $LAST_STATUS
    if [ $LAST_STATUS != 0 ]
    then
        echo 'connection dead... respawning'
        ssh -N -O exit    -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no"                             *TARGET_USER*@*TARGET_HOST*  # add forward 
        rm -f /tmp/control.sock
        
        ssh -N            -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*    -M -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto" -o "ClearAllForwardings yes" -o "StrictHostKeyChecking no"                              *TARGET_USER*@*TARGET_HOST*& # spawn the master
        sleep 5
        echo 'preparing to register client...'
        ssh               -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no"                              *TARGET_USER*@*TARGET_HOST* "register $ORIGINAL_USER_NAME $FORWARD_PORT $STATIC_DIRECTORY" # add forward 
        sleep 1
        echo 'starting to forward connection'
        ssh -N -O forward -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no" -R 22:localhost:*LISTEN_PORT* *TARGET_USER*@*TARGET_HOST*  # add forward 
    fi
    
    sleep 10
done

echo "exit child"